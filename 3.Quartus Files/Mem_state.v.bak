module Mem_state(input clk2,
               input clock_en,
				   input [1:0]memory_state,
					output Clock_LED,
			      output [7:0] ctrlsig_out);

					
reg [5:0] present = 6'd0;
reg [5:0] next = 6'd1;
//reg [1:0]mem = 2'd2;

reg [7:0]mem_ctrl; 

parameter
fetch1     = 6'd0,
comm1       = 6'd2,
comm2       = 6'd3,
comm3       = 6'd4,
comm4       = 6'd5,
diff1       = 6'd6,
diff2       = 6'd7,
diff3       = 6'd8,
diff4       = 6'd9;

scaledclock clock(.inclk(clk2),.ena(clock_en),.clk(clk));

assign ctrlsig_out = mem_ctrl;
assign Clock_LED = clk;

 always @(posedge clk)
begin 
	present <= next;
end



always @(present)
case(present)
	fetch1: begin
		mem_ctrl[0]    <= 1;		//INC_dec_en
		mem_ctrl[1]    <= 0;		//RST_dec_en
		mem_ctrl[2]    <= 1;		//WTR_dec_en
		mem_ctrl[3]    <= 0;		//DR_write_en
		mem_ctrl[4]    <= 1;		//PC_write_en
		mem_ctrl[5]    <= 0;		//mem_read
		mem_ctrl[6]    <= 1;		//WTA_en
	   mem_ctrl[7]    <= 0;		//CoreID_read_en	

		 if      (memory_state == 2'd01)   next <= comm1;
       else if (memory_state == 2'd02)   next <= diff1;	
       else    next <= fetch1;		
end
///////////////////////////////////////////////////////////////////////
	comm1: begin
		mem_ctrl[0]    <= 1;		//INC_dec_en
		mem_ctrl[1]    <= 0;		//RST_dec_en
		mem_ctrl[2]    <= 0;		//WTR_dec_en
		mem_ctrl[3]    <= 0;		//DR_write_en
		mem_ctrl[4]    <= 0;		//PC_write_en
		mem_ctrl[5]    <= 0;		//mem_read
		mem_ctrl[6]    <= 0;		//WTA_en
	   mem_ctrl[7]    <= 0;		//CoreID_read_en				
		next <= comm2 ;
	end
	comm2: begin
		mem_ctrl[0]    <= 1;		//INC_dec_en
		mem_ctrl[1]    <= 1;		//RST_dec_en
		mem_ctrl[2]    <= 0;		//WTR_dec_en
		mem_ctrl[3]    <= 0;		//DR_write_en
		mem_ctrl[4]    <= 0;		//PC_write_en
		mem_ctrl[5]    <= 0;		//mem_read
		mem_ctrl[6]    <= 0;		//WTA_en
	   mem_ctrl[7]    <= 0;		//CoreID_read_en			
		next <= comm3 ;
	end
	comm3: begin
		mem_ctrl[0]    <= 1;		//INC_dec_en
		mem_ctrl[1]    <= 1;		//RST_dec_en
		mem_ctrl[2]    <= 1;		//WTR_dec_en
		mem_ctrl[3]    <= 0;		//DR_write_en
		mem_ctrl[4]    <= 0;		//PC_write_en
		mem_ctrl[5]    <= 0;		//mem_read
		mem_ctrl[6]    <= 0;		//WTA_en
	   mem_ctrl[7]    <= 0;		//CoreID_read_en		
		next <= comm4 ;
	end
	comm4: begin
		mem_ctrl[0]    <= 1;		//INC_dec_en
		mem_ctrl[1]    <= 1;		//RST_dec_en
		mem_ctrl[2]    <= 1;		//WTR_dec_en
		mem_ctrl[3]    <= 1;		//DR_write_en
		mem_ctrl[4]    <= 0;		//PC_write_en
		mem_ctrl[5]    <= 0;		//mem_read
		mem_ctrl[6]    <= 0;		//WTA_en
	   mem_ctrl[7]    <= 0;		//CoreID_read_en			
		next <= fetch1 ;
	end
///////////////////////////////////////////////////////
	diff1: begin
		mem_ctrl[0]    <= 0;		//INC_dec_en
		mem_ctrl[1]    <= 0;		//RST_dec_en
		mem_ctrl[2]    <= 0;		//WTR_dec_en
		mem_ctrl[3]    <= 0;		//DR_write_en
		mem_ctrl[4]    <= 0;		//PC_write_en
		mem_ctrl[5]    <= 0;		//mem_read
		mem_ctrl[6]    <= 0;		//WTA_en
	   mem_ctrl[7]    <= 1;		//CoreID_read_en				
		next <= diff2 ;
	end
	diff2: begin
		mem_ctrl[0]    <= 0;		//INC_dec_en
		mem_ctrl[1]    <= 0;		//RST_dec_en
		mem_ctrl[2]    <= 0;		//WTR_dec_en
		mem_ctrl[3]    <= 0;		//DR_write_en
		mem_ctrl[4]    <= 0;		//PC_write_en
		mem_ctrl[5]    <= 0;		//mem_read
		mem_ctrl[6]    <= 1;		//WTA_en
	   mem_ctrl[7]    <= 1;		//CoreID_read_en			
		next <= diff3 ;
	end
	diff3: begin
		mem_ctrl[0]    <= 0;		//INC_dec_en
		mem_ctrl[1]    <= 0;		//RST_dec_en
		mem_ctrl[2]    <= 0;		//WTR_dec_en
		mem_ctrl[3]    <= 0;		//DR_write_en
		mem_ctrl[4]    <= 0;		//PC_write_en
		mem_ctrl[5]    <= 1;		//mem_read
		mem_ctrl[6]    <= 1;		//WTA_en
	   mem_ctrl[7]    <= 1;		//CoreID_read_en		
		next <= diff4 ;
	end
	diff4: begin
		mem_ctrl[0]    <= 0;		//INC_dec_en
		mem_ctrl[1]    <= 0;		//RST_dec_en
		mem_ctrl[2]    <= 0;		//WTR_dec_en
		mem_ctrl[3]    <= 0;		//DR_write_en
		mem_ctrl[4]    <= 1;		//PC_write_en
		mem_ctrl[5]    <= 1;		//mem_read
		mem_ctrl[6]    <= 1;		//WTA_en
	   mem_ctrl[7]    <= 1;		//CoreID_read_en			
		next <= fetch1 ;
	end
	
	default: begin
		mem_ctrl[0]    <= 1;		//INC_dec_en
		mem_ctrl[1]    <= 1;		//RST_dec_en
		mem_ctrl[2]    <= 1;		//WTR_dec_en
		mem_ctrl[3]    <= 1;		//DR_write_en
		mem_ctrl[4]    <= 1;		//PC_write_en
		mem_ctrl[5]    <= 1;		//mem_read
		mem_ctrl[6]    <= 1;		//WTA_en
	   mem_ctrl[7]    <= 1;		//CoreID_read_en			
		next <= fetch1 ;
	end	
endcase
		
endmodule
	