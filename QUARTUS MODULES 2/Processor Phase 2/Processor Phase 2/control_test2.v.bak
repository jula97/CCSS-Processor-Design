module control_test2(input clk2,
					output reg [6:0] conn,
					output reg clk3=1'd0);

reg [5:0] present = 6'd0;
reg [5:0] next = 6'd1;
reg [12:0]ctrlsig;

parameter
add1 = 6'd1,
add2 = 6'd2,
add3 = 6'd3,
add4 = 6'd4,
add5 = 6'd5,
add6 = 6'd6,
add7 = 6'd7,
add8 = 6'd8;

clock_test_Clock_divider CLOCK(.clock_in(clk2), .clock_out(clk1));

always @ (posedge clk1)
begin
		if (clk3 == 1'd0)
			clk3 <= 1'd1;
		else if (clk3 == 1'd1)
			clk3 <= 1'd0;
end

always @(posedge clk1)
begin	
	present <= next;
	conn <= ctrlsig[6:0];
end

always @(present) 
if (present == add1)
begin
	ctrlsig <= 7'b1111111;
	next <= add2 ;
end

else if (present == add2) 
begin
ctrlsig <= 7'b1111110 ;
next <= add3 ;
end

else if (present == add3)  
begin
ctrlsig <= 7'b1111100 ;
next <= add4 ;
end

else if (present == add4)  
begin
ctrlsig <= 7'b1111000 ;
next <= add5 ;
end

else if (present == add5)  
begin
ctrlsig <= 7'b1110000 ;
next <= add6 ;
end

else if (present == add6)  
begin
ctrlsig <= 7'b1100000 ;
next <= add7 ;
end

else if (present == add7)  
begin
ctrlsig <= 7'b1000000 ;
next <= add8 ;
end

else if (present == add8)  
begin
ctrlsig <= 7'b1101111 ;
next <= 6'b111111 ;
end

else 
begin 
ctrlsig <= 7'b1010101 ;
next <= 6'd1;
end
endcase

endmodule
